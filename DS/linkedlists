# #linked lists




# class Node:
#     def __init__(self,data):
#         self.data=data
#         self.next=None

# class LinkedList:
#     def __init__(self):
#         self.head=None
#         self.tail=None 
#     def isempty(self):
#         return self.head == None and self.tail==None
#     def addfirst(self,data):
#         newnode=Node(data)

#         if self.isempty():
#             self.head=newnode
#             self.tail=newnode
#         else:
#             newnode.next=self.head
#             self.head=newnode
#     def addlast(self,data):
#         newnode=Node(data)

#         if self.isempty():
#             self.head=newnode
#             self.tail=newnode 
#         else:
#             self.tail.next=newnode 
#             self.tail=newnode 
    
#     def deletefirst(self):
        
#         if self.isempty():
#             print("Linked list is empty")
#         else:
#             self.head=self.head.next

#     def reverse(self):
#         prev=None
#         curr=self.head
#         while curr!=None:
#             next=curr.next
#             curr.next=prev
#             prev=curr
#             curr=next
#         self.head=prev
 
#     def deletelast(self):
#         if self.isempty():
#             print("Linked list is empty")
#         elif self.head == self.tail:  # only one element
#             self.head = None
#             self.tail = None
#         else:
#             temp=self.head
#             while temp.next!=self.tail:
#                 temp=temp.next
#             temp.next=None
#             self.tail=temp



#     def printdata(self):
#         if self.isempty():
#             print("Linked list is empty")
#             return
#         temp=self.head
#         while temp!=None:
#             print(temp.data,"->",end=" ")
#             temp=temp.next
#         print()

# s1=LinkedList()
# s1.addfirst(3)
# s1.addfirst(4)
# s1.addfirst(5)
# s1.printdata()
# s1.addlast(9)
# s1.addlast(8)
# s1.printdata()
# s1.reverse()
# s1.printdata()
# # s1.deletefirst()
# # s1.deletefirst()
# # s1.deletefirst()
# # s1.printdata()
# # s1.deletelast()
# # s1.deletelast()
# # s1.printdata()


# class node:
#     def __init__(self,data):
#         self.data=data
#         self.next=None
# class linkedlist:
#     def __init__(self):
#         self.head=None
#         self.tail=None
#     def isempty(self):
#         return self.head==None and self.tail==None
#     def addlast(self,data):
#         newnode=node(data)
#         if self.isempty():
#             self.head=newnode
#             self.tail=newnode
#         else:
#             self.tail.next=newnode
#             self.tail=newnode
    
#     def reverse(self):
#         prev=None
#         curr=self.head
#         while curr!=None:
#             next=curr.next
#             curr.next=prev
#             prev=curr
#             curr=next
#         self.head=prev
#     def printdata(self):
#         if self.isempty():
#             print("linked list is empty")
#             return
#         temp=self.head
#         while temp!=None:
#             print(temp.data,"->",end=" ")
#             temp=temp.next
#         print()
# arr=list(map(int,input().split()))
# s1=linkedlist()
# for i in arr:
#     s1.addlast(i)
# s1.reverse()
# s1.printdata()


# a=[1,2,3,4,5,6,7,8,9]
# k=2
# n=len(a)
# if k>n:
#     print("invalid")
# else:
#     print(a[k-1],a[n-k])

# n=int(input())
# arr1=list(map(int,input().split()))
# m=int(input())
# arr2=list(map(int,input().split()))
# x=int("".join(str(i) for i in arr1))
# y=int("".join(str(i) for i in arr2))
# s=x+y
# result=[int(i) for i in str(s)]
# print(result)


