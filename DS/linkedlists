class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None 
    def isempty(self):
        return self.head == None and self.tail==None
        
    def addfirst(self,data):
        newnode=Node(data)
        if self.isempty():
            self.head=newnode
            self.tail=newnode
        else:
            newnode.next=self.head
            self.head=newnode
    def addlast(self,data):
        newnode=Node(data)
        if self.isempty():
            self.head=newnode
            self.tail=newnode 
        else:
            self.tail.next=newnode 
            self.tail=newnode 
        
    def addmiddle(self,prevnode,data):
        if prevnode is None:
            print("The given previous node cannot be NULL")
            return
        newnode=Node(data)
        newnode.next=prevnode.next
        prevnode.next=newnode

    def addAtPos(self, pos, data):
        if pos == 1:
            self.addfirst(data)
            return
        temp = self.head
        for _ in range(pos - 2):
            if not temp:
                print("Position out of range")
                return
            temp = temp.next
        newnode = Node(data)
        newnode.next = temp.next
        temp.next = newnode
        if temp == self.tail:
            self.tail = newnode

    def deletefirst(self):
        if self.isempty():
            print("Linked list is empty")
        else:
            self.head=self.head.next
    def deletelast(self):
        if self.isempty():
            print("Linked list is empty")
        elif self.head == self.tail:  # only one element
            self.head = None
            self.tail = None
        else:
            temp=self.head
            while temp.next!=self.tail:
                temp=temp.next
            temp.next=None
            self.tail=temp
    
    def deleteAtPos(self, pos):
        if self.isempty():
            print("Linked list is empty")
            return
        if pos == 1:
            self.deletefirst()
            return
        temp = self.head
        for _ in range(pos - 2):
            if not temp or not temp.next:
                print("Position out of range")
                return
            temp = temp.next
        if temp.next == self.tail:
            self.tail = temp
        if temp.next:
            temp.next = temp.next.next
    
    def reverse(self):
        prev=None
        curr=self.head
        while curr!=None:
            next=curr.next
            curr.next=prev
            prev=curr
            curr=next
        self.head=prev

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False

    def findmiddle(self):
        slow=self.head
        fast=self.head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        return slow.data if slow else None
    
    def count(self):
        temp = self.head
        cnt = 0
        while temp:
            cnt += 1
            temp = temp.next
        return cnt
    
    def printdata(self):
        if self.isempty():
            print("Linked list is empty")
            return
        temp=self.head
        while temp!=None:
            print(temp.data,"->",end=" ")
            temp=temp.next
        print("None")

s1=LinkedList()
s1.addfirst(3)
s1.addfirst(4)
s1.addfirst(5)
s1.printdata()
s1.addlast(9)
s1.addlast(10)
s1.printdata()
# Insert after a middle node
s1.addmiddle(s1.head.next, 99)   # Insert 99 after node with data=4
s1.printdata()
s1.addAtPos(2, 77)               # insert at position 2
s1.printdata()
s1.deletefirst()
s1.printdata()
s1.deletelast()
s1.printdata()
s1.deleteAtPos(3)               # delete node at position 3
s1.printdata()
s1.reverse()
s1.printdata()
s1.search(4)
print(s1.search(4))
print(s1.findmiddle())
print("Total nodes:", s1.count())